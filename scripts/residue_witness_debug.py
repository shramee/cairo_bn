# This script follows paper 'On Proving Pairings' - https://eprint.iacr.org/2024/640
# to generate residue witness for the final exponentiation.

# From 2.1 Eliminating the Final Exponentiation,
# Two elements x, y ∈ F are equivalent if there exists some c such that  x * c**r = y
# Our optimization avoids this cost by instead providing c as auxiliary input and
# directly checking xcr = y. In this way we replace an exponentiation by (q**k − 1)/r
# with an exponentiation by r, which in general is much cheaper.


# from py_ecc import bn128, fields
# from py_ecc.bn128 import bn128_curve;
from py_ecc.fields import (
    bn128_FQ as FQ,
    bn128_FQ12 as FQ12,
)

from residue_witness import print_fq12, tower_to_direct, x, q, r, unity


def fq12(*coeffs) -> FQ12:
    return FQ12(tower_to_direct(coeffs))


λ = 6 * x + 2 + q - q**2 + q**3
λ1 = 6 * x + 2
λ2 = q - q**2 + q**3
m = λ // r
d = 3  # = gcd(m, h)

f = fq12(
    0x1BF4E21820E6CC2B2DBC9453733A8D7C48F05E73F90ECC8BDD80505D2D3B1715,
    0x264F54F6B719920C4AC00AAFB3DF29CC8A9DDC25E264BDEE1ADE5E36077D58D7,
    0xDB269E3CD7ED27D825BCBAAEFB01023CF9B17BEED6092F7B96EAB87B571F3FE,
    0x25CE534442EE86A32C46B56D2BF289A0BE5F8703FB05C260B2CB820F2B253CF,
    0x33FC62C521F4FFDCB362B12220DB6C57F487906C0DAF4DC9BA736F882A420E1,
    0xE8B074995703E92A7B9568C90AE160E4D5B81AFFE628DC1D790241DE43D00D0,
    0x84E35BD0EEA3430B350041D235BB394E338E3A9ED2F0A9A1BA7FE786D391DE1,
    0x244D38253DA236F714CB763ABF68F7829EE631B4CC5EDE89B382E518D676D992,
    0x1EE0A098B62C76A9EBDF4D76C8DFC1586E3FCB6A01712CBDA8D10D07B32C5AF4,
    0xD23AEB23ACACF931F02ECA9ECEEE31EE9607EC003FF934694119A9C6CFFC4BD,
    0x16558217BB9B1BCDA995B123619808719CB8A282A190630E6D06D7D03E6333CA,
    0x14354C051802F8704939C9948EF91D89DB28FE9513AD7BBF58A4639AF347EA86,
)

# residue witness c,

wi = fq12(
    0x0,
    0x0,
    0x25BA8E0531275A44594C4F53B44497BD8D7341FD41E5FAF337FA74DBBFF9FE1,
    0x10BD041A04B5422922463BD8B6519B59AF036109A228AA43FDB7F215226ECE12,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
)


c = fq12(
    0x1BAF2A84EB47CE42094FD98972BC4BB0F2936EF400AEA71EAFF2C663E3A0FC4D,
    0x1386BA1F43D9BFA49764547C97CCE737F86A88B32D9129370BDD1C3AACEAE690,
    0x19CA8ADFE0165968C479453CEAC5D78D54BEEC199FD30AF10476E46A7DA56127,
    0x8C68AD81FEFA3678A4C488228F6EC2E68FAB44F5FC386A71EDF490D13165BAF,
    0xAA529AD6ED3D0A32AA2ABD113EF97605F58EEA5ACE47A9A946899FAEFCB3895,
    0x1EEED7320D8C8646893377A138B1A265F171E37E7F73A58C52D4EC94E6BC0529,
    0x1E46A4AB1EFE63CC304F321E79B74B5E52728DF2FC3F3043DCDFCF9F816C568C,
    0x2C12B2472CFFC96EF1CD313AEAE8462296F4AD7B8E6B06073C97B7F0EBF0AD31,
    0x5303C5EDED61BD49638D9B64B23971F19C50BC4651EC93DF1EE04C676CF5B77,
    0x130BA50AED6232A4885AD91EE99E4A7B2C0D65E4F2CED84DE31F0449AD05CA0A,
    0xA5AEC882CA48F7ED31209C6EA95B0CD055CBD8C184715CE59C40CCF95C566CD,
    0x40837988D67F97256BB7E5E121802B523F460B3713E079588A5FF10659CFE2D,
)

c_inv = fq12(
    0x5B9A079BC26832A0F6C91A8C3D52F0696E128C4DC02C2E7ECCD6750879DB37F,
    0x2E555F161B4D72F939FFDC89EC00F1933D46DBBA698EB47DD16427D357FC293D,
    0x1B137F9BF629C0DBCDD8087034E1F3557CE533998E4E2566B9961515FE3E8874,
    0x9D878A403981D9DC63F4987D88DF92F797412464F26753411B8E7500D316487,
    0x14E05EB80B6F7E23ECFA04A410CFA1CF8036F3161C7D586802B485FBA82FA9E9,
    0x35039DC8C011DB7EB2C0E91709001BA13C91C6B2A06F5ED32005C4990ED64CB,
    0xB67955A9EED460C7FE5F21790CB806E1A6FAA832E5ED9751F4C769B94F233D4,
    0x1A87D2B49B7FE718A8AAED495061C6C7AB0F83010AA102BADCE3B5F057717586,
    0x1426DBE6A25C91A8D3AC59A34C4EA7D7E0075EF206A5DD08A33D1998B58651C1,
    0x27ACB2E47242C471014D129C1A37D0FB662480C13480796CDC381735384A6C5A,
    0x7459382FD7B5F159E32AE6EB1F5A1AC9ADDE6E0E347011855CC9F8B5BC89021,
    0x2884F79CD78DBEF6B64FD2A8AF7ABBB9CB36D280C0C63074E74F0287D3B2EB2D,
)

residue_witness_inv = c_inv
residue_witness = c

result = fq12(
    0x258BEA1D0475BB03A12C6103CCF82F31C06E56EC40A89C53388732370C1239E2,
    0x90CAAA528DACF587DFAD0C0B1CE783A15CDA6258C65EF995BD19460BAF82BC8,
    0x6FB1BE64552B46BEF143C55C3C34B1A34A25C7408F4271AD5755B5EFEF888BA,
    0x2D3D143A09C22FCEE97FBEB1D73B12D3EE2DDA6C163D1CCE9D803608B9E38776,
    0xBE380E49D02AEB2971F4FCD249DEE16731E0C08860CDD4E859BD6E6C732282A,
    0x61B0125B7CC3C0383AABE9C463A75784EEDCFA9B51E2961A639409314500897,
    0x145E4A15B7EEB7CEB5BADE430066D294F0B8BD56336A2AECE0474E5C696E7B18,
    0x2D8CADBD2A6391A457C13FEF2ABA61734A5F63417C950F8C5A1BFB88A3D45150,
    0x1CD1D17E6B3DE64CF13727ED8066CEDBC710490EBA9B1CBEDA41C51CD6BF1131,
    0x2944997FEBB3D26780F9603083CA4E9E8F9E41BED30B2E15789998FA6349292A,
    0x1CFDB081566A1625068057DC583305661DF23366FACEF8F9617CD3B715FCBCAC,
    0x2073ABC9675A45B4917509F8E563AF33DDA11B130B81538D2BBB59A7A7CA2085,
)

assert c_inv**λ1 * f == result, "incorrect λ1"

miller_cubic = fq12(
    0x2737D858AEC12CBADF6007363380E37FE1998DBDB60A8D238357232321256FB1,
    0x1577F75AA8B8FAB9D0B81D64D715C5A7F2273F9501C089461E9955F41290E80C,
    0x2D5535A32E15322924E102B528C4F0FE5954D0FA0F1EE5A9B80A7D8CAB5F43B9,
    0x16F0A79588C4E6CEC6A8DD43282DAFB1D91D67FADA8D66790ABB009A5497AA91,
    0x207A20957D29D6AB41F5DAE611C49EAF547BE5A3D30FAAA9F6554C924D5ABA32,
    0x26CDD786E25E2DBA4B1F9997ADB7648435A08D4EC65A7A460BAC5467666B578,
    0x13E4604E424EC3251910E3F1CC5950ABCD4F10D8CCD037BB5117A5A585971EF3,
    0x1059452F56AC6B89B6EBA6B883F20147EC67C091B9949999AD4A4764882AAF69,
    0x194042F5CEFDD2F6510F7C7C338264AACCBE0BDD5DCC5121776AC18CC066A121,
    0x109F1873092203303782DA349D75A0B8F0CA0CCF641449AD46B6D98C2569BC53,
    0x80E8EE36FE03D3F2A28A5A62BAF3D24A4090C19C029C4253A507DAB48B9C4CC,
    0x21664BF7FBFFE4B124FCB6CF58300CD4E5DC4A7AB79B55EC186BBFE4D7155081,
)

result_ccc = fq12(
    0x16731580329AD6FDD9DA681356A24DED0489F2AA1235F7727C75A875B3C3CD4B,
    0x1E63F5FA430E5B73CC4C04EE57CBCD8789BEAC895A9B04CB5738D9B26914BF84,
    0x126A1D8C853BED09CC53909FA7CD464EC49193E3A7C0B1F3A4C155EE1DF25770,
    0x20E2289C59796D25CCA986CAFE7BD2A9CD798D0874FDFA40C6FACD7387BF2038,
    0x18C882B0FE699D4573BCE2A806BDC8674541FA4600A980D3BA1AF478129A5931,
    0x1AF6CE2049D4C4573FE99CFC1E35414CC62BFDB839ACEA55076F7259925711DB,
    0x18AA5F02AE51CCAEF06A26645D488D6FB01364F2CF431528BDEF204D3344E92,
    0x156340A81DA84EF2CE734ACDBC818D772A228911ECC7341DC2A3721D7CA99CC4,
    0xB2DC206769F03C2952549B1EE816F367FF1EA48DB5E67A8E478C5AC3DAAB3FE,
    0x1801AB8A57ED55746761C170B0CE8E8883E955CDEA9CCB4645813E2959B9D0BD,
    0x15B992D872D09F110C9BBD22B6747FE6D7E248EB54E03D36C3113519417BFF9C,
    0x1627805F8738E5244A35CB91B2A4E0C255D3CF8D7354690531C0EBDB73B5E232,
)

# print_fq12("miller_with_cinv = ", (c_inv**λ1) * wi)

# print_fq12("pairing:", (c_inv**λ1) * f * wi * (c_inv**λ2))

assert miller_cubic == result * wi, "miller cubic incorrect"
assert result_ccc == miller_cubic * c_inv**λ2, "incorrect easy λ2 exponentiation"

result_lambda_2 = fq12(
    0x2BEAA9B58CB027E751A8F5B30E1EFBC84F4B0422D561CA0FFE3E3DA0576CA5D4,
    0x28B0862910162BA93029AC01C45FF5BA915070989865D16E93778867567FC958,
    0x14994368A9126CC5EE42E0D0E1A6A30FC2969557155C52F8ED588D075BBD036F,
    0x26EE8131C53BEE6A28AB310343C646CF46365F9C17CBAB6C458B9041C8F6D3BC,
    0x17021E95106BB39C4C9C051365EA1CFA7116E84B848B4972DF3B8F88CD3ADEC9,
    0x16FD73F1F2EBF74CD5E840A4465D8AE2F33D49CB25519F5339D952CFAF4F23D6,
    0x11EA2639C42EBA6C893E930D22413222B1284609590EA0DAC6D28DB77AF6A0CA,
    0x1BE749CA3ECBE56F60FAC823F6A57A29AC0FAA61C684CC52B13E852656F6651B,
    0xAADC080991B2E52B021383CB2EF21906227216EF6564D970957BDC875378443,
    0x5497272259B66D29976945969168E70AE8B25BE4D5F8DF2EC5725CCCDDFB83,
    0x283ED886085F3A857EE21109F70BC3599F2A172BB3BB4749B0A13E96A77B32BC,
    0x219964A51020F3ED73C36462DA50BF58D8CC7300ABB3B976C5EB36A45D994027,
)

print("all ok")
